/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */
group="com.dxs.auth.core"
version = file("../version.txt").readText(Charsets.UTF_8).trim()

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.12.1")
    testImplementation("org.mockito:mockito-core:5.16.1")
    testImplementation("org.mockito:mockito-junit-jupiter:5.16.1")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    implementation("io.jsonwebtoken:jjwt-api:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6")
    implementation("org.apache.commons:commons-math3:3.6.1")
    implementation("com.google.guava:guava:33.4.6-jre")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

publishing {
    publications {
        create<MavenPublication>("pub") {
            from(components["java"])
            group="com.dxs.auth.core"
            artifactId = "auth-core"
            version=project.version.toString()
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/antoineromand/dxs-auth-core")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register("bumpVersion") {
    description = "Incrémente la version (usage: ./gradlew bumpVersion -Ptype=major|minor|patch)"
    doLast {
        val type = project.findProperty("type")?.toString() ?: "minor"
        val file = file("../version.txt")
        val versionParts = file.readText().trim().split(".").map { it.toInt() }.toMutableList()

        when (type) {
            "major" -> {
                versionParts[0] += 1
                versionParts[1] = 0
                versionParts[2] = 0
            }
            "minor" -> {
                versionParts[1] += 1
                versionParts[2] = 0
            }
            "patch" -> {
                versionParts[2] += 1
            }
            else -> {
                throw GradleException("Type de version inconnu: '$type'. Utilise major, minor ou patch.")
            }
        }

        val newVersion = versionParts.joinToString(".")
        file.writeText(newVersion)
        println("✅ Version bump: $newVersion")
    }
}

tasks.jar {
    archiveBaseName = "auth-core"
}

